name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
    inputs:
      IMAGE_TAG:
        description: 'Tag for Docker images'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install Rust toolchain
        uses: actions/setup-rust@v1
        with:
          rust-version: stable
      - name: Rustfmt
        run: cargo fmt --manifest-path backend/Cargo.toml --all -- --check
      - name: Install frontend deps
        run: npm install --prefix frontend
      - name: Svelte Check
        run: npm run lint --prefix frontend
      - name: Run frontend tests
        run: npm test --prefix frontend
      - name: Build frontend
        run: npm run build --prefix frontend
      - name: Generate API docs
        run: npx -y redoc-cli@0.13.21 bundle docs/openapi.yaml -o docs/api.html
      - name: Check backend (Clippy)
        run: cargo clippy --manifest-path backend/Cargo.toml --all-targets -- --deny warnings
      - name: Run migrations
        run: cargo run --manifest-path backend/Cargo.toml --bin migrate

  frontend-coverage:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: Install deps
        run: npm install --prefix frontend
      - name: Run vitest coverage
        run: npx vitest run --coverage
        working-directory: frontend
      - name: Upload frontend coverage
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: frontend/coverage

  backend-tests:
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-rust@v1
        with:
          rust-version: stable
      - name: Run backend tests
        run: cargo test --manifest-path backend/Cargo.toml --all-targets
        env:
          RUST_LOG: debug
      - name: Install cargo-tarpaulin
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-tarpaulin
      - name: Generate backend coverage
        if: matrix.os == 'ubuntu-latest'
        run: cargo tarpaulin --manifest-path backend/Cargo.toml --out Xml --output-dir coverage
      - name: Upload backend coverage
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: coverage

  release:
    needs: [build, backend-tests, frontend-coverage]
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.event.inputs.IMAGE_TAG || (startsWith(github.ref, 'refs/tags/') && github.ref_name) || 'latest' }}
    steps:
      - uses: actions/checkout@v3
      - name: Build backend image
        run: docker build -t backend:${{ env.IMAGE_TAG }} -f backend/Dockerfile .
      - name: Build frontend image
        run: docker build -t frontend:${{ env.IMAGE_TAG }} -f frontend/Dockerfile .
      - name: Log in to registry
        if: ${{ secrets.REGISTRY != '' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Push backend image
        if: ${{ secrets.REGISTRY != '' }}
        run: |
          docker tag backend:${{ env.IMAGE_TAG }} ${{ secrets.REGISTRY }}/backend:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.REGISTRY }}/backend:${{ env.IMAGE_TAG }}
      - name: Push frontend image
        if: ${{ secrets.REGISTRY != '' }}
        run: |
          docker tag frontend:${{ env.IMAGE_TAG }} ${{ secrets.REGISTRY }}/frontend:${{ env.IMAGE_TAG }}
          docker push ${{ secrets.REGISTRY }}/frontend:${{ env.IMAGE_TAG }}
